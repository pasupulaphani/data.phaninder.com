{ "__v" : 0, "_id" : "about", "body" : "<p style=\"text-align: justify;\">I live in London. I am a full stack developer who specializes in creating dynamic and beautiful web apps. I have been developing web, desktop, mobile applications since I was 17. &nbsp;I currently spend more time in developing new automation techniques for automating project life cycles of my mobile apps.</p>\r\n<p style=\"text-align: justify;\"><em>I am a big believer in simplicity, and I am passionate about the web.&nbsp;My main goal is to help people to create smarter apps.</em></p>\r\n<p style=\"text-align: justify;\">I am a contributor to Chef, nodeJs, Rails, Hortonworks and other open source and free software and specifications usually in my personal projects. Often can be seen bugging committers of opensource projects. I can found at&nbsp;Hackathons, tech meet ups.</p>\r\n<ul>\r\n<li style=\"text-align: justify;\"><strong>Education</strong>: Master of Science in Computer Systems and Software Engineering. The University of Edinburgh, UK.</li>\r\n<li style=\"text-align: justify;\"><strong>Work</strong>: Currently developer at Openbet Ltd, UK.</li>\r\n<li style=\"text-align: justify;\"><strong>Passion</strong>: Writing code, problem solving and working in&nbsp;kick-ass development teams</li>\r\n<li style=\"text-align: justify;\"><strong>Fun</strong><font face=\"Verdana, Geneva, sans-serif\">:&nbsp;</font>Outside of technology I l<font face=\"Verdana, Geneva, sans-serif\">ove playing cricket, badminton and I am an avid hiker and runner. Often found at 10k runs and definitely at charity runs.</font></li>\r\n</ul>\r\n<p style=\"text-align: justify;\"><font face=\"Verdana, Geneva, sans-serif\">Past jobs include working as a developer at <a href=\"http://peekabu.net/\" target=\"_blank\">Peekabu Studios Limited, UK</a>, developing products and prototypes that can track markers(augmented reality) based on computer vision technologies (OpenCV, Processing, Java and others).</font></p>", "created" : { "$date" : 1389356210891 }, "modified" : { "$date" : 1389402520550 }, "status" : "M", "title" : "Hi, I'm Phani, thanks for coming by!", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "adventures-at-nodecoptor", "body" : "<p style=\"text-align: justify;\"><a href=\"http://nodecopter.com/\" target=\"_blank\">NodeCopter</a>&nbsp;is a full day event where you can&nbsp;spend the day&nbsp;programming&nbsp;and playing with&nbsp;<a href=\"http://ardrone2.parrot.com/\" target=\"_blank\">Parrot AR Drone 2.0</a>&nbsp;.</p>\r\n<p><img src=\"http://2.bp.blogspot.com/-OlG-anenu3Y/UwQTiut69mI/AAAAAAAAB_M/Fjbo6MbwTGM/s1600/ardrone2_hd_outdoor_b_dlc57l.jpg\" alt=\"ardrone 2.0\" width=\"711\" height=\"336\" /></p>\r\n<p style=\"text-align: center;\">Fig1. - Parrot AR Drone 2.0</p>\r\n<p>AR Drone is equipped&nbsp;with</p>\r\n<ul>\r\n<li>Linux (<a href=\"http://en.wikipedia.org/wiki/BusyBox\">BusyBox</a>)</li>\r\n<li>Wifi</li>\r\n<li>1 Ghz CPU, 125 MB Memory</li>\r\n<li>HD Front camera, Low res bottom camer</li>\r\n<li>Automatic hovering at a fixed position (using altitude sensor and optical flow tracking). For full info refer&nbsp;<a href=\"http://www.msh-tools.com/ardrone/ARDrone_Developer_Guide.pdf\" target=\"_blank\">Developer Guide</a>.</li>\r\n</ul>\r\n<h4>Let's program to control it!&nbsp;</h4>\r\n<ul>\r\n<li>Install Node.js</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\"><strong>Why Node.js?</strong></p>\r\n<p style=\"text-align: justify; padding-left: 30px;\">While talking to bots we are dealing with a lot of interference. So you require something that does jobs either be processed simultaneously or chained to occur in a particular sequence.&nbsp;Node functions asynchronously through which&nbsp;multiple data streams can be queried simultaneously.&nbsp; This non-blocking data transmission means that Node doesn't have to wait for anything that blocks.</p>\r\n<ul>\r\n<li>Connect to the drone's WiFi with your laptop</li>\r\n<li>Install the&nbsp;<a href=\"https://github.com/eschnou/ardrone-autonomy\" target=\"_blank\">ardrone-autonomy</a>&nbsp;module (I prefer this over&nbsp;<a href=\"https://github.com/felixge/node-ar-drone\" target=\"_blank\">ar-drone</a>&nbsp;module)</li>\r\n<li>Lets create a mission</li>\r\n</ul>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9050052\" data-gist-file=\"ardrone-mission.js\"><a href=\"https://gist.github.com/pasupulaphani/9050052?file=ardrone-mission.js\" target=\"_blank\">https://gist.github.com/pasupulaphani/9050052?file=ardrone-mission.js</a></code></p>\r\n<h4>My mission</h4>\r\n<p>My aim was to control drone using&nbsp;fiducial marker. For which I used&nbsp;</p>\r\n<ul>\r\n<li><a href=\"http://www.uco.es/investiga/grupos/ava/node/26\" target=\"_blank\">ArUco</a>: a minimal library for Augmented Reality</li>\r\n<li>OpenCv</li>\r\n<li><a href=\"https://github.com/bkw/node-dronestream\" target=\"_blank\">node-dronestream</a></li>\r\n<li>ExpressJs</li>\r\n</ul>\r\n<p>I initialize my Node.js server,&nbsp;drone lifts into the air and hovers there, waiting for a&nbsp;fiducial marker to be detected. As soon as it detects the marker it follows it. I can see&nbsp;the drone&rsquo;s video camera, which is streaming in my browser.&nbsp;</p>\r\n<p><img src=\"http://4.bp.blogspot.com/-FevPypbPZGs/UwQcnMqYcEI/AAAAAAAAB_g/m6SHb5is700/s1600/IMG_20140212_164111_us5o5d.jpg\" alt=\"Fig2. - Drone: Ready\" width=\"328\" height=\"438\" /><img src=\"http://2.bp.blogspot.com/-Bopw1bd3VEY/UwQcnCtkONI/AAAAAAAAB_c/EBrJ4Tm-sMQ/s1600/IMG_20140212_163734_iiuafy.jpg\" alt=\"Fig2.1 - Drone: Take off\" width=\"328\" height=\"438\" /></p>\r\n<p>All this was achieved&nbsp;in a day.&nbsp;This is only the beginning of my drone journey.&nbsp;</p>\r\n<p><em>Code, videos and images of the app will be added soon.&nbsp;</em></p>", "created" : { "$date" : 1392648605939 }, "modified" : { "$date" : 1392778716870 }, "status" : "P", "title" : "Adventures at NodeCoptor", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "contact", "body" : "<p>Choose your favorite communication method and say hello! You may also want to&nbsp;<a href=\"../phaninder.vcf\" type=\"text/x-vcard\">download my vCard</a>.</p>\r\n<p><strong>Email</strong></p>\r\n<p style=\"padding-left: 30px;\"><a href=\"mailto:hello@phaninder.com\">hello@phaninder.com</a></p>\r\n<p><strong>Mobile telephone</strong></p>\r\n<p style=\"padding-left: 30px;\"><a class=\"tel\" href=\"tel:+44 742-476-0598\">+44 742-476-0598</a></p>\r\n<p><strong>Physical address</strong></p>\r\n<p style=\"padding-left: 30px;\">25A Chesterfield Road,&nbsp;Chiswick, London, UK,&nbsp;W4 3HQ</p>\r\n<p><strong>Instant message</strong></p>\r\n<p style=\"padding-left: 30px;\">Skype<strong>&nbsp;<img src=\"http://mystatus.skype.com/smallicon/pasupulaphani\" alt=\"Skype status\" width=\"16\" height=\"16\" />&nbsp;<a id=\"skype\" class=\"url\" href=\"skype:pasupulaphani?chat\">pasupulaphani</a></strong></p>", "created" : { "$date" : 1389319914019 }, "modified" : { "$date" : 1389410107773 }, "status" : "M", "title" : "Hey there!Â ", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "gotchas-connect-mongo-session-store", "body" : "<p style=\"text-align: justify;\"><a href=\"https://github.com/kcbanner/connect-mongo\" target=\"_blank\">connect-mongo</a>&nbsp;module which is commonly used for session store for a MongoDb backend. This post is an extension for my previous post&nbsp;<a href=\"mongodb-error-trying-to-open-unclosed-connection/edit\" target=\"_blank\">MongoDB/Mongoose connect best practices</a>. In this post I would like to elaborate&nbsp;good practices in using session store.</p>\r\n<p><strong>Initialization</strong></p>\r\n<p style=\"text-align: justify;\">When using mongoose with connect-mongo you need to initialize the session store after&nbsp;mongoose connects.</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"mongostore_conn.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=mongostore_conn.js\">https://gist.github.com/pasupulaphani/9463004?file=mongostore_conn.js</a></code></p>\r\n<p>If not this might lead to the below errors.</p>\r\n<blockquote>\r\n<pre class=\"lang-js prettyprint prettyprinted\"><code><span class=\"typ\">Error</span><span class=\"pun\">:</span><span class=\"typ\">Trying</span><span class=\"pln\"> to open unclosed connection</span><span class=\"pun\">.<br /></span></code></pre>\r\n</blockquote>\r\n<blockquote>\r\n<pre class=\"lang-js prettyprint prettyprinted\"><code><span class=\"pun\">Error: Error setting TTL index on collection : sessions<br /></span></code></pre>\r\n</blockquote>\r\n<p style=\"text-align: justify;\"><strong>Enable auto reconnect</strong></p>\r\n<p style=\"text-align: justify;\">It also takes the param&nbsp;<code><span class=\"s2\">\"auto_reconnect\"</span><span class=\"o\">:</span>&nbsp;<span class=\"kc\">true</span></code>.&nbsp;This will&nbsp;be passed as&nbsp;constructor to MongoDb server as the auto_reconnect option. By setting this you can avoid the below error</p>\r\n<blockquote>\r\n<pre class=\"lang-js prettyprint prettyprinted\"><code><span class=\"nb\">Error</span><span class=\"o\">:</span> <span class=\"nx\">no</span> <span class=\"nx\">open</span> <span class=\"nx\">connections</span></code></pre>\r\n</blockquote>\r\n<p style=\"text-align: justify;\">Sample set-up can be found&nbsp;<a href=\"https://gist.github.com/pasupulaphani/9463004#file-connect-mongo_session_store-js\" target=\"_blank\">here</a>.</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"connect-mongo_session_store.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_session_store.js\">https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_session_store.js</a></code></p>\r\n<p class=\"gh-header-title\"><strong>Use existing Mongoose or Mongo native connection</strong></p>\r\n<p class=\"gh-header-title\" style=\"text-align: justify;\">Yes, instead of creating a new Db object, you can just reuse the <strong>db object</strong> or <strong>a connection</strong> already instantiated by mongoose!</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"connect-mongo_use_mongoose_conn1.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn1.js\">https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn1.js</a></code></p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"connect-mongo_use_mongoose_conn2.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn2.js\">https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn2.js</a></code></p>\r\n<p style=\"text-align: justify;\">Also make sure that&nbsp;<code><span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span></code><span class=\"nx\"><code>db</code> is fully initialized before used for session store otherwise it fails with&nbsp;TTL for 'sessions' error.</span></p>\r\n<p><strong>Using connect events</strong></p>\r\n<p style=\"text-align: justify;\">It is common practice to start app initialization with connection open event. If you use 'open' or 'connecting' events, there is a good possibility&nbsp;that the connection might not be&nbsp;fully initialized by the time you use it for session store. Make sure that you use appropriate events like 'connected' before you use existing mongoose connection. If not you might encounter above errors. Below is from a sample from my&nbsp;<a href=\"mongodb-error-trying-to-open-unclosed-connection/edit\">other post</a></p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-line=\"8-9\" data-gist-file=\"mongoose_connet.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=mongoose_connet.js\">https://gist.github.com/pasupulaphani/9463004?file=mongoose_connet.js</a></code></p>\r\n<p>&nbsp;</p>", "created" : { "$date" : 1394615127725 }, "modified" : { "$date" : 1394666277809 }, "status" : "P", "title" : "Gotchas : Connect-mongo session store", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "mongodbmongoose-connect-best-practices", "body" : "<p style=\"text-align: justify;\">It is important how to handle your MongoDb connections in your app. Basically when you fail to close an connection and try to open it instantaneously, you probably encounter this error. It can be while retrieving data,&nbsp;running tests, creating sessions.</p>\r\n<blockquote>\r\n<pre class=\"lang-js prettyprint prettyprinted\"><code><span class=\"typ\">Error</span><span class=\"pun\">:</span><span class=\"typ\">Trying</span><span class=\"pln\"> to open unclosed connection</span><span class=\"pun\">.</span></code></pre>\r\n</blockquote>\r\n<p style=\"text-align: justify;\">As the error says you are trying to open an unclosed connection with MongoDb. Few things to know before you start with Mongoose to avoid these type of errors:</p>\r\n<ul>\r\n<li style=\"text-align: justify;\">Do not open a connection for each web request.</li>\r\n<li style=\"text-align: justify;\">Open it and leave it open until you close/shutdown your app.</li>\r\n<li style=\"text-align: justify;\">Use createConnection instead of mongoose.connect if needed to connect to several different databases</li>\r\n</ul>\r\n<h4>Mongoose connect&nbsp;sample</h4>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"mongoose_connet.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=mongoose_connet.js\">https://gist.github.com/pasupulaphani/9463004?file=mongoose_connet.js</a></code></p>\r\n<ul>\r\n<li>Use <a href=\"http://mongoosejs.com/docs/api.html#index_Mongoose-createConnection\" target=\"_blank\">mongoose.createConnection</a>&nbsp;to create a new connection&nbsp;instance if needed.</li>\r\n<li>For long running applications&nbsp;if you see&nbsp;<code>\"connection closed\"</code>&nbsp;errors&nbsp;try&nbsp;enable&nbsp;<code>keepAlive</code></li>\r\n</ul>\r\n<p style=\"text-align: justify;\"><code>mongoose.connect</code>&nbsp;opens a pool of connections that concurrent requests can share.&nbsp;You shouldn't be connecting and disconnecting on each request. Instead, connect during your application start up and disconnect during shutdown.</p>\r\n<h4 style=\"text-align: justify;\">Mongoose response hooks</h4>\r\n<p style=\"text-align: justify;\">Sometimes when you are streaming huge data you may need to close connections after every request. For this you can use after response events/hooks.</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"after_res_hooks.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=after_res_hooks.js\">https://gist.github.com/pasupulaphani/9463004?file=after_res_hooks.js</a></code></p>\r\n<h4>Connect-mongo session store tips</h4>\r\n<p style=\"text-align: justify;\"><a href=\"https://github.com/kcbanner/connect-mongo\" target=\"_blank\">connect-mongo</a>&nbsp;module which is commonly used for session store takes the param <code><span class=\"s2\">\"auto_reconnect\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span></code>.&nbsp;This will&nbsp;be passed as&nbsp;constructor to MongoDb server as the auto_reconnect option.</p>\r\n<p style=\"text-align: justify;\"><em>When using mongoose with connect-mongo you need to initialize the session store after&nbsp;mongoose connects.</em></p>\r\n<p>Sample set-up can be found <a href=\"https://gist.github.com/pasupulaphani/9463004#file-connect-mongo_session_store-js\" target=\"_blank\">here</a>.</p>\r\n<p class=\"gh-header-title\"><strong><span class=\"js-issue-title\">Use existing mongoose connection</span></strong></p>\r\n<p class=\"gh-header-title\">Yes, instead of creating a new Db object, you can just reuse the db object already instantiated by mongoose!</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"connect-mongo_use_mongoose_conn.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn.js\">https://gist.github.com/pasupulaphani/9463004?file=connect-mongo_use_mongoose_conn.js</a></code></p>\r\n<h4>Mocha Tests</h4>\r\n<p style=\"text-align: justify;\">You don't have to open a new connection for each test, connect once at the top level of your test and re-use the connection</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"9463004\" data-gist-file=\"mocha_tests.js\"><a href=\"https://gist.github.com/pasupulaphani/9463004?file=mocha_tests.js\">https://gist.github.com/pasupulaphani/9463004?file=mocha_tests.js</a></code></p>\r\n<p>&nbsp;</p>", "created" : { "$date" : 1394495593058 }, "modified" : { "$date" : 1394574512543 }, "status" : "P", "title" : "MongoDB/Mongoose connect best practices", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "put-and-delete-can-they-be-used-as-html-form-methods", "body" : "<p style=\"text-align: justify;\">If you've designed a web service for other HTTP clients, you've used&nbsp;PUT and DELETE as well.&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong><em>What are these methods?</em></strong></p>\r\n<p style=\"text-align: justify;\">HTTP PUT and DELETE are used in&nbsp;<span class=\"qlink_container\">REST (software architectural style)</span>&nbsp;for content.</p>\r\n<p style=\"text-align: justify;\"><strong><em>Are they allowed as HTML Form methods?</em></strong></p>\r\n<p style=\"text-align: justify;\">No, only methods that are allowed in HTML forms are POST and GET.</p>\r\n<ul style=\"text-align: justify;\">\r\n<li>HTML4 / XHTML1 : See&nbsp;<a href=\"http://www.w3.org/TR/html4/interact/forms.html#h-17.3\" target=\"_blank\">form spec</a></li>\r\n<li>HTML5 : See&nbsp;<a href=\"http://www.w3.org/TR/html5/forms.html#attr-fs-action\" target=\"_blank\">form spec</a></li>\r\n</ul>\r\n<p style=\"text-align: justify;\"><em><strong>What happens if I use other than POST and GET as an&nbsp;HTML form method?</strong></em></p>\r\n<p style=\"text-align: justify;\">Browser doesn't complain but it will be sent as GET request.</p>\r\n<p style=\"text-align: justify;\"><em><strong>Can I&nbsp;make a&nbsp;PUT and DELETE requests from an HTML form?</strong></em></p>\r\n<p style=\"text-align: justify;\">Yes,</p>\r\n<ol style=\"text-align: justify;\">\r\n<li><span class=\"qlink_container\">JavaScript</span>&nbsp;can invoke them using XMLHttpRequest.</li>\r\n<li>If the server is Restful&nbsp;architecture&nbsp;then hopefully there could be a work around provided to override methods, if not create a override.</li>\r\n</ol>\r\n<p style=\"text-align: justify;\"><strong>1. XMLHttpRequest req:</strong></p>\r\n<p style=\"text-align: justify;\">Below is a pure JS function that&nbsp;makes a PUT request to the server. You can use&nbsp;jQuery&rsquo;s AJAX method which is more usable and simplified form that wraps&nbsp;<code>XMLHttpRequest</code>&nbsp;raw browser object.</p>\r\n<p style=\"text-align: justify;\">&nbsp; <code data-gist-id=\"8402603\" data-gist-file=\"makePutReq.js\"><a href=\"https://gist.github.com/pasupulaphani/8402603?file=makePutReq.js\" target=\"_blank\">https://gist.github.com/pasupulaphani/8402603?file=makePutReq.js</a></code></p>\r\n<blockquote style=\"padding-left: 30px;\">-&gt; Please make sure that the server has given you permissions to use&nbsp;these methods. You can verify them by making an OPTIONS request and&nbsp;looking into Access-Control-Allow-Methods option values.</blockquote>\r\n<blockquote style=\"padding-left: 30px;\">-&gt; For&nbsp;Cross-Origin Resource Sharing (CORS)&nbsp;look at origin options (Access-Control-Allow-Origin).&nbsp;See&nbsp;<a href=\"http://www.html5rocks.com/en/tutorials/cors/#toc-types-of-cors-requests\" target=\"_blank\">HTML 5 Rocks Tutorial on CORS</a>&nbsp;for a quick look and here is <a href=\"http://www.w3.org/TR/cors/\" target=\"_blank\">full spec</a>.</blockquote>\r\n<p>&nbsp;</p>\r\n<p style=\"text-align: justify;\"><strong>&nbsp;2. Server with Restful architecture:</strong></p>\r\n<p style=\"text-align: justify;\">REST service is based on HTTP protocol nevertheless is just a set of conventions about how to use HTTP.&nbsp;All modern web frameworks provide us with handlers for HTTP&nbsp;method override which makes&nbsp;web API easier and&nbsp;cleaner. Lets see how they are implemented in few major web frameworks.</p>\r\n<h5 style=\"text-align: justify;\"><strong>ExpressJs CURD:</strong></h5>\r\n<p style=\"text-align: justify;\">Expressjs is based on REST architecture and provides us with an handler for method override.</p>\r\n<ol style=\"list-style-type: lower-alpha; text-align: justify;\">\r\n<li>Add this line <code>app.use(express.methodOverride())</code> to your middleware configuration.</li>\r\n<li>Add&nbsp;<code>app.put</code> for PUT&nbsp;and <code>app.delete</code> for DELETE in your routes and change their respective handlers if you have controllers setup.</li>\r\n<li>Add an hidden input element with name \"_method\" to your form with the CURD action as its value .</li>\r\n</ol>\r\n<p style=\"text-align: justify;\">&nbsp; <code data-gist-id=\"8402603\" data-gist-file=\"expressJs_put_form.html\"><a href=\"https://gist.github.com/pasupulaphani/8402603?file=expressJs_put_form.html\" target=\"_blank\">https://gist.github.com/pasupulaphani/8402603?file=expressJs_put_form.html</a></code></p>\r\n<blockquote style=\"padding-left: 30px;\">-&gt; Do not remove 'method=\"post\"' from the form.</blockquote>\r\n<h5 style=\"text-align: justify;\">&nbsp;<strong>Rails CURD:</strong></h5>\r\n<p>Rails accepts a POST request and looks for a&nbsp;:method&nbsp;parameter; assuming it is a default scaffold, PUT gets routed to <span style=\"text-decoration: underline;\">update</span>&nbsp;controller def; similarly DELETE gets routed to <span style=\"text-decoration: underline;\">destroy</span>&nbsp;controller def.</p>\r\n<p>&nbsp;&nbsp;<code data-gist-id=\"8402603\" data-gist-file=\"rails_put_req.erb\"><a href=\"https://gist.github.com/pasupulaphani/8402603?file=rails_put_req.erb\" target=\"_blank\">https://gist.github.com/pasupulaphani/8402603?file=rails_put_req.erb</a></code></p>", "created" : { "$date" : 1389560018007 }, "modified" : { "$date" : 1389652350100 }, "status" : "P", "title" : "PUT and DELETE: can they be used as HTML form methods ?", "user" : "pasupulaphani@gmail.com" }
{ "__v" : 0, "_id" : "reactor-pattern-general-architecture-for-event-driven-systems", "body" : "<p style=\"text-align: justify;\"><em>Every app is built to scale at one time or another.</em></p>\r\n<p style=\"text-align: justify;\">With traditional technique of&nbsp;spawning a thread-per-response or crating socket-per-incoming connection or with&nbsp;thread pool pattern&nbsp;makes it difficult to scale (please note that this is not a statement as the factor of scalability&nbsp;largely&nbsp;depends on the type of problem your app is solving).</p>\r\n<p style=\"text-align: justify;\">Problem with having many threads is it may lead performance problems due to&nbsp;overhead of context switching and complex concurrency schemes. <strong>Most of the time spent</strong> by server doing context-switching between requests where threads handling <strong>event listeners do not read or write data frequently.</strong></p>\r\n<p style=\"text-align: justify;\"><em>To reduce the overhead of context switching the concept of non blocking IO is put to practice.</em></p>\r\n<h4 style=\"text-align: justify;\"><strong>Reactor pattern:</strong></h4>\r\n<p style=\"text-align: justify;\">Reactor pattern is asynchronous or non blocking model that Node uses for I/O. This is one of the <a href=\"http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf\" target=\"_blank\">earliest papers</a>&nbsp;where reactor pattern is discussed in detail.</p>\r\n<p style=\"text-align: justify;\">Imagine writing a web service. Typically web server tasks include -</p>\r\n<ul>\r\n<li style=\"text-align: justify;\">Read request</li>\r\n<li style=\"text-align: justify;\">Decode request</li>\r\n<li style=\"text-align: justify;\">Process service</li>\r\n<li style=\"text-align: justify;\">Encode reply</li>\r\n<li style=\"text-align: justify;\">Send reply</li>\r\n</ul>\r\n<p style=\"text-align: justify;\">Each task differ in nature and cost. Mostly tasks <strong>involves IO</strong>, whether it is writing or reading from a database or a disk/filesystem or a&nbsp;computational service; they all tend to be <strong>blocking operations</strong>.&nbsp;&nbsp;This means that the <strong>processor</strong> can spend most of its time <strong>idle</strong> waiting for I/O operations to complete. What if we can delegate an operation to an handler and continue with other tasks but get back to them when finished.&nbsp;Event-driven IO uses similar ideas using reactor pattern technique but many systems differ in design.</p>\r\n<p style=\"text-align: justify;\">There are two important actors in the architecture of reactor pattern:</p>\r\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://2.bp.blogspot.com/-gZ2vKl9VpWI/Uwan3po6olI/AAAAAAAAB_0/FDpfgQdUt3w/s1600/reactor_pattern+(2).png\" alt=\"Reactor Pattern\" width=\"497\" height=\"291\" /></p>\r\n<p style=\"text-align: center;\">Fig 1.0 : Basic skeleton of a Reactor pattern</p>\r\n<p style=\"text-align: justify;\">The reason I call the components as Actors is due to the fact that they don't have a shared state, communication is done by message passing/notifications. (depends on the implementation though)</p>\r\n<p style=\"text-align: justify;\"><strong>Handler</strong> : Performs non-blocking actions</p>\r\n<p style=\"text-align: justify;\"><strong>Reactor</strong> : This responds to IO events by dispatching the appropriate handler.</p>\r\n<p style=\"text-align: justify; padding-left: 30px;\">Basic <em>dispatch()</em> in the reactor&nbsp;implementation would be a single threaded event loop dispatches events on handles (e.g. sockets, file descriptors) to event handlers.</p>\r\n<blockquote>\r\n<pre style=\"padding-left: 30px;\"><em>select (handlers);<br /></em><em>foreach h in handlers loop<br /></em><em>&nbsp;&nbsp;&nbsp;&nbsp; h.handle_event(type)<br /></em><em>end loop</em></pre>\r\n</blockquote>\r\n<p>So when a request arrives on the server, they are serviced one at a time and dispatched to its handler as fast as they can. When the code does some IO, it receives the async treatment of \"getting back\" to it when it finishes. Until then, it services another request. This avoids the \"hostaged\" memory and processing, and keeps your CPU utilization maximum all the time.</p>\r\n<h4><strong>Benefits:</strong></h4>\r\n<ul>\r\n<li style=\"text-align: justify;\"><strong>Separation of concerns</strong> - Components are modular, event handlers are separated from low-level mechanism and handlers can be composed easily as they are decoupled&nbsp;of application-independent mechanisms from application-specific policies. In other words, handler objects need not be aware of how events are dispatched.&nbsp;</li>\r\n<li>No thread context switching</li>\r\n<li><strong>Concurrency is simplified</strong> due to being in a single thread. So you never have the risk of mutable thread accessing the same mutable state.</li>\r\n</ul>\r\n<h4>&nbsp;<strong>Drawbacks</strong>:</h4>\r\n<ul>\r\n<li style=\"text-align: justify;\"><strong>Non-pre-emptive model</strong> - Handlers cannot take long time.</li>\r\n<li style=\"text-align: justify;\"><strong>Difficult to understand</strong> to get started with but latter comes <strong>hard to debug</strong>. Since it is not always clear why a particular handler was invoked, and because it may be difficult to repeat the computation preceding the fault.</li>\r\n<li style=\"text-align: justify;\">One faulty event handler your entire server is down.&nbsp;</li>\r\n</ul>\r\n<p><em>This pattern is the foundation for the&nbsp;events processing structure implemented in&nbsp;Node.js, Ruby's eventmachine,&nbsp;JBoss Netty,&nbsp;Apache MINA, Python's&nbsp;Twisted&nbsp;event-driven I/O libraries.</em></p>\r\n<p>&nbsp;</p>", "created" : { "$date" : 1392946657444 }, "modified" : { "$date" : 1392989428560 }, "status" : "P", "title" : "Reactor pattern: general architecture for event-driven systems", "user" : "pasupulaphani@gmail.com" }
